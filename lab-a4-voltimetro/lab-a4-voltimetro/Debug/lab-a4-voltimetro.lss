
lab-a4-voltimetro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000384  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000806  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e0  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000150  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  9e:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <write_display>:
	// Ler as informações em ADCH e ADCL
	uint16_t tempAdcValue = ((uint16_t) ADCH << 8) | ADCL;
	// adcValue convertido para uint32 para ter mais bits
	// Valor divido por 1024 para gastar menos esforço
	adcValue = ((((uint32_t) tempAdcValue) * 5000)/ 1024);
	ADCSRA &= ~(1 << 6);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	e6 2f       	mov	r30, r22
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	ee 5f       	subi	r30, 0xFE	; 254
  b2:	fe 4f       	sbci	r31, 0xFE	; 254
  b4:	40 81       	ld	r20, Z
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	11 f4       	brne	.+4      	; 0xbe <write_display+0x18>
  ba:	40 68       	ori	r20, 0x80	; 128
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <write_display+0x1a>
  be:	4f 77       	andi	r20, 0x7F	; 127
  c0:	65 b1       	in	r22, 0x05	; 5
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <write_display+0x28>
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	8a 95       	dec	r24
  d0:	e2 f7       	brpl	.-8      	; 0xca <write_display+0x24>
  d2:	cf 01       	movw	r24, r30
  d4:	86 2b       	or	r24, r22
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	1b b8       	out	0x0b, r1	; 11
  da:	4b b9       	out	0x0b, r20	; 11
  dc:	08 95       	ret

000000de <__vector_16>:
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	86 bd       	out	0x26, r24	; 38
 104:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 108:	e1 30       	cpi	r30, 0x01	; 1
 10a:	11 f1       	breq	.+68     	; 0x150 <__vector_16+0x72>
 10c:	20 f0       	brcs	.+8      	; 0x116 <__vector_16+0x38>
 10e:	e2 30       	cpi	r30, 0x02	; 2
 110:	09 f4       	brne	.+2      	; 0x114 <__vector_16+0x36>
 112:	44 c0       	rjmp	.+136    	; 0x19c <__vector_16+0xbe>
 114:	6b c0       	rjmp	.+214    	; 0x1ec <__vector_16+0x10e>
 116:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11e:	24 2f       	mov	r18, r20
 120:	ad ec       	ldi	r26, 0xCD	; 205
 122:	bc ec       	ldi	r27, 0xCC	; 204
 124:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	9c 01       	movw	r18, r24
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	82 0f       	add	r24, r18
 148:	93 1f       	adc	r25, r19
 14a:	64 2f       	mov	r22, r20
 14c:	68 1b       	sub	r22, r24
 14e:	7b c0       	rjmp	.+246    	; 0x246 <__vector_16+0x168>
 150:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	ad ec       	ldi	r26, 0xCD	; 205
 15a:	bc ec       	ldi	r27, 0xCC	; 204
 15c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 160:	ac 01       	movw	r20, r24
 162:	56 95       	lsr	r21
 164:	47 95       	ror	r20
 166:	56 95       	lsr	r21
 168:	47 95       	ror	r20
 16a:	56 95       	lsr	r21
 16c:	47 95       	ror	r20
 16e:	9a 01       	movw	r18, r20
 170:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	9c 01       	movw	r18, r24
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	82 0f       	add	r24, r18
 194:	93 1f       	adc	r25, r19
 196:	64 2f       	mov	r22, r20
 198:	68 1b       	sub	r22, r24
 19a:	55 c0       	rjmp	.+170    	; 0x246 <__vector_16+0x168>
 19c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	36 95       	lsr	r19
 1a6:	27 95       	ror	r18
 1a8:	36 95       	lsr	r19
 1aa:	27 95       	ror	r18
 1ac:	ab e7       	ldi	r26, 0x7B	; 123
 1ae:	b4 e1       	ldi	r27, 0x14	; 20
 1b0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 1b4:	ac 01       	movw	r20, r24
 1b6:	56 95       	lsr	r21
 1b8:	47 95       	ror	r20
 1ba:	9a 01       	movw	r18, r20
 1bc:	ad ec       	ldi	r26, 0xCD	; 205
 1be:	bc ec       	ldi	r27, 0xCC	; 204
 1c0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	9c 01       	movw	r18, r24
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	82 0f       	add	r24, r18
 1e4:	93 1f       	adc	r25, r19
 1e6:	64 2f       	mov	r22, r20
 1e8:	68 1b       	sub	r22, r24
 1ea:	2d c0       	rjmp	.+90     	; 0x246 <__vector_16+0x168>
 1ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	36 95       	lsr	r19
 1f6:	27 95       	ror	r18
 1f8:	36 95       	lsr	r19
 1fa:	27 95       	ror	r18
 1fc:	36 95       	lsr	r19
 1fe:	27 95       	ror	r18
 200:	a5 ec       	ldi	r26, 0xC5	; 197
 202:	b0 e2       	ldi	r27, 0x20	; 32
 204:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 208:	ac 01       	movw	r20, r24
 20a:	52 95       	swap	r21
 20c:	42 95       	swap	r20
 20e:	4f 70       	andi	r20, 0x0F	; 15
 210:	45 27       	eor	r20, r21
 212:	5f 70       	andi	r21, 0x0F	; 15
 214:	45 27       	eor	r20, r21
 216:	9a 01       	movw	r18, r20
 218:	ad ec       	ldi	r26, 0xCD	; 205
 21a:	bc ec       	ldi	r27, 0xCC	; 204
 21c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	9c 01       	movw	r18, r24
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	82 0f       	add	r24, r18
 240:	93 1f       	adc	r25, r19
 242:	64 2f       	mov	r22, r20
 244:	68 1b       	sub	r22, r24
 246:	8e 2f       	mov	r24, r30
 248:	0e 94 53 00 	call	0xa6	; 0xa6 <write_display>
 24c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 256:	84 30       	cpi	r24, 0x04	; 4
 258:	11 f4       	brne	.+4      	; 0x25e <__vector_16+0x180>
 25a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <config_timer>:
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	86 bd       	out	0x26, r24	; 38
 284:	14 bc       	out	0x24, r1	; 36
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	85 bd       	out	0x25, r24	; 37
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 290:	08 95       	ret

00000292 <config_adc>:
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 298:	87 e8       	ldi	r24, 0x87	; 135
 29a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 29e:	08 95       	ret

000002a0 <config_ios>:
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	8a b9       	out	0x0a, r24	; 10
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	84 b9       	out	0x04, r24	; 4
 2a8:	15 b8       	out	0x05, r1	; 5
 2aa:	08 95       	ret

000002ac <config>:
 2ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <config_ios>
 2b0:	0e 94 49 01 	call	0x292	; 0x292 <config_adc>
 2b4:	0e 94 40 01 	call	0x280	; 0x280 <config_timer>
 2b8:	08 95       	ret

000002ba <main>:
}

int main(void)
{
	config();
 2ba:	0e 94 56 01 	call	0x2ac	; 0x2ac <config>
	sei();
 2be:	78 94       	sei
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <main+0x6>

000002c2 <__umulhisi3>:
 2c2:	a2 9f       	mul	r26, r18
 2c4:	b0 01       	movw	r22, r0
 2c6:	b3 9f       	mul	r27, r19
 2c8:	c0 01       	movw	r24, r0
 2ca:	a3 9f       	mul	r26, r19
 2cc:	70 0d       	add	r23, r0
 2ce:	81 1d       	adc	r24, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	91 1d       	adc	r25, r1
 2d4:	b2 9f       	mul	r27, r18
 2d6:	70 0d       	add	r23, r0
 2d8:	81 1d       	adc	r24, r1
 2da:	11 24       	eor	r1, r1
 2dc:	91 1d       	adc	r25, r1
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
